// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["nextboard"]
}

// Custom types
enum TUserGender {
  unknown
  male
  female

  @@schema("nextboard")
}

enum TResourceOpenTarget {
  external
  internal
  internalTab
  internalTabPinned

  @@schema("nextboard")
}

enum TAccountType {
  local
  oauth

  @@schema("nextboard")
}

enum TAccountProvider {
  localPwd
  localOtp
  github
  google
  wechat
  qq

  @@schema("nextboard")
}

// Tables

model User {
  id              String      @id @default(cuid())
  name            String?
  displayName     String?     @map("display_name")
  email           String      @unique
  emailVerifiedAt DateTime?   @map("email_verified_at")
  avatar          String?
  gender          TUserGender @default(unknown)
  birthday        DateTime?
  online          Boolean     @default(false)
  disabled        Boolean     @default(false)
  password        String

  accounts Account[]
  roles    UserRole[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")

  creator      User?  @relation("UserCreatedUsers", fields: [createdBy], references: [id])
  createdUsers User[] @relation("UserCreatedUsers")

  updater      User?  @relation("UserUpdatedUsers", fields: [updatedBy], references: [id])
  updatedUsers User[] @relation("UserUpdatedUsers")

  createdRoles Role[] @relation("UserCreatedRoles")
  updatedRoles Role[] @relation("UserUpdatedRoles")

  createdPermissions Permission[] @relation("UserCreatedPermissions")
  updatedPermissions Permission[] @relation("UserUpdatedPermissions")

  createdResources Resource[] @relation("UserCreatedResources")
  updatedResources Resource[] @relation("UserUpdatedResources")

  createdDicts Dict[] @relation("UserCreatedDicts")
  updatedDicts Dict[] @relation("UserUpdatedDicts")

  createdUserRoles           UserRole[]           @relation("UserCreatedUserRole")
  createdResourceuPermissons ResourcePermission[] @relation("UserCreatedResourcePermission")
  createdRolePermissions     RolePermission[]     @relation("UserCreatedRolePermission")

  @@map("users")
  @@schema("nextboard")
}

model Account {
  id                String           @id @default(cuid())
  userId            String           @map("user_id")
  type              TAccountType
  provider          TAccountProvider
  providerAccountId String           @map("provider_account_id")
  refreshToken      String?          @map("refresh_token")
  accessToken       String?          @map("access_token")
  expiredAt         DateTime?        @map("expired_at")
  refreshExpiredAt  DateTime?        @map("refresh_expired_at")
  tokenType         String?          @map("token_type")
  scope             String?
  idToken           String?          @map("id_token")
  sessionState      String?          @map("session_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("nextboard")
}

// Verification code
model VCode {
  id        Int      @id @default(autoincrement())
  owner     String
  code      String
  expiredAt DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([owner, code])
  @@map("vcodes")
  @@schema("nextboard")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String?  @map("display_name")
  remark      String?
  isSystem    Boolean? @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   String?  @map("created_by")
  updatedBy   String?  @map("updated_by")

  users       UserRole[]
  permissions RolePermission[]

  creator User? @relation("UserCreatedRoles", fields: [createdBy], references: [id])

  updater User? @relation("UserUpdatedRoles", fields: [updatedBy], references: [id])

  @@map("roles")
  @@schema("nextboard")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdBy String?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  creator User? @relation("UserCreatedUserRole", fields: [createdBy], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
  @@schema("nextboard")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String?  @map("display_name")
  remark      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   String?  @map("created_by")
  updatedBy   String?  @map("updated_by")

  roles     RolePermission[]
  resources ResourcePermission[]

  creator User? @relation("UserCreatedPermissions", fields: [createdBy], references: [id])
  updater User? @relation("UserUpdatedPermissions", fields: [updatedBy], references: [id])

  @@map("permissions")
  @@schema("nextboard")
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  createdBy    String?  @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  creator    User?      @relation("UserCreatedRolePermission", fields: [createdBy], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
  @@schema("nextboard")
}

model Resource {
  id          String              @id @default(cuid())
  name        String              @unique
  displayName String?             @map("display_name")
  url         String?
  icon        String?
  visible     Boolean
  keepAlive   Boolean             @map("keep_alive")
  target      TResourceOpenTarget @default(internalTab)
  remark      String?
  parentId    String?             @map("parent_id")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  createdBy   String?             @map("created_by")
  updatedBy   String?             @map("updated_by")

  creator  User?      @relation("UserCreatedResources", fields: [createdBy], references: [id])
  updater  User?      @relation("UserUpdatedResources", fields: [updatedBy], references: [id])
  parent   Resource?  @relation("ResourceParentResources", fields: [parentId], references: [id])
  children Resource[] @relation("ResourceParentResources")

  permissions ResourcePermission[]

  @@map("resources")
  @@schema("nextboard")
}

model ResourcePermission {
  id           Int      @id @default(autoincrement())
  resourceId   String   @map("resource_id")
  permissionId String   @map("permission_id")
  createdBy    String?  @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")

  resource   Resource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  creator    User?      @relation("UserCreatedResourcePermission", fields: [createdBy], references: [id])

  @@unique([resourceId, permissionId])
  @@map("resource_permissions")
  @@schema("nextboard")
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    String?  @map("user_id")
  userEmail String?  @map("user_email")
  ip        String?
  userAgent String?  @map("user_agent")
  operation String
  level     String?
  meta      Json?
  isSystem  Boolean? @default(false) @map("is_system")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("logs")
  @@schema("nextboard")
}

model Dict {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String?  @map("display_name")
  content     String
  meta        Json?
  remark      String?
  type        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   String?  @map("created_by")
  updatedBy   String?  @map("updated_by")

  creator User? @relation("UserCreatedDicts", fields: [createdBy], references: [id])
  updater User? @relation("UserUpdatedDicts", fields: [updatedBy], references: [id])

  @@map("dicts")
  @@schema("nextboard")
}
