// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
  schemas  = ["nextboard"]
}

// Custom types
enum TUserGender {
  unknown
  male
  female

  @@schema("nextboard")
}

enum TMenuOpenTarget {
  external
  internal
  internalTab
  internalTabPinned

  @@schema("nextboard")
}

// Schemas for Auth.js - begin
model User {
  id            String      @id @default(cuid())
  name          String?
  displayName   String?     @map("display_name")
  email         String      @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  gender        TUserGender @default(unknown)
  birthday      DateTime?
  online        Boolean     @default(false)
  disabled      Boolean     @default(false)
  password      String

  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  logs          Log[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")

  creator      User?  @relation("UserCreatedUsers", fields: [createdBy], references: [id])
  createdUsers User[] @relation("UserCreatedUsers")

  updater      User?  @relation("UserUpdatedUsers", fields: [updatedBy], references: [id])
  updatedUsers User[] @relation("UserUpdatedUsers")

  createdRoles Role[] @relation("UserCreatedRoles")
  updatedRoles Role[] @relation("UserUpdatedRoles")

  createdPermissions Permission[] @relation("UserCreatedPermissions")
  updatedPermissions Permission[] @relation("UserUpdatedPermissions")

  createdMenus Menu[] @relation("UserCreatedMenus")
  updatedMenus Menu[] @relation("UserUpdatedMenus")

  createdUserRoles UserRole[] @relation("UserCreatedUserRole")
  createdMenuPermissons MenuPermission[] @relation("UserCreatedMenuPermission")
  createdRolePermissions RolePermission[] @relation("UserCreatedRolePermission")

  @@map("users")
  @@schema("nextboard")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("nextboard")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs Log[]

  @@map("sessions")
  @@schema("nextboard")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
  @@schema("nextboard")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
  @@schema("nextboard")
}

// Schemas for Auth.js - end

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String?  @map("display_name")
  remark      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   String?  @map("created_by")
  updatedBy   String?  @map("updated_by")

  users       UserRole[]
  permissions RolePermission[]

  creator User? @relation("UserCreatedRoles", fields: [createdBy], references: [id])

  updater User? @relation("UserUpdatedRoles", fields: [updatedBy], references: [id])

  @@map("roles")
  @@schema("nextboard")
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String
  roleId String
  createdBy   String?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  creator User? @relation("UserCreatedUserRole", fields: [createdBy], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
  @@schema("nextboard")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  code        Int
  displayName String?  @map("display_name")
  remark      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   String?  @map("created_by")
  updatedBy   String?  @map("updated_by")

  roles RolePermission[]
  menus MenuPermission[]

  creator User? @relation("UserCreatedPermissions", fields: [createdBy], references: [id])
  updater User? @relation("UserUpdatedPermissions", fields: [updatedBy], references: [id])

  @@map("permissions")
  @@schema("nextboard")
}

model RolePermission {
  id           Int    @id @default(autoincrement())
  roleId       String
  permissionId String
  createdBy   String?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  creator User? @relation("UserCreatedRolePermission", fields: [createdBy], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
  @@schema("nextboard")
}

model Menu {
  id          String          @id @default(cuid())
  name        String          @unique
  displayName String?         @map("display_name")
  url         String?
  icon        String?
  visible     Boolean
  keepAlive   Boolean         @map("keep_alive")
  target      TMenuOpenTarget @default(internalTab)
  remark      String?
  parentId    String?         @map("parent_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  createdBy   String?         @map("created_by")
  updatedBy   String?         @map("updated_by")

  creator  User?  @relation("UserCreatedMenus", fields: [createdBy], references: [id])
  updater  User?  @relation("UserUpdatedMenus", fields: [updatedBy], references: [id])
  parent   Menu?  @relation("MenuParentMenus", fields: [parentId], references: [id])
  children Menu[] @relation("MenuParentMenus")

  permissions MenuPermission[]

  @@map("menus")
  @@schema("nextboard")
}

model MenuPermission {
  id           Int    @id @default(autoincrement())
  menuId       String
  permissionId String
  createdBy   String?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  menu       Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  creator User? @relation("UserCreatedMenuPermission", fields: [createdBy], references: [id])

  @@unique([menuId, permissionId])
  @@map("menu_permissions")
  @@schema("nextboard")
}

model Log {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  ip        String?
  userAgent String?  @map("user_agent")
  operation String
  level     String?
  sessionId String?  @map("session_id")
  meta      Json?
  createdAt DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@map("logs")
  @@schema("nextboard")
}
